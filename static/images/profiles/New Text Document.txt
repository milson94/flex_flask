import io
from PIL import Image
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, HRFlowable, Frame, PageTemplate, Image as ReportLabImage
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.colors import HexColor, gray

def generate_pdf(data, photo_path):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter,
                            rightMargin=0.75*inch, leftMargin=0.75*inch,
                            topMargin=0.75*inch, bottomMargin=0.75*inch)

    styles = getSampleStyleSheet()

    # --- Custom Styles ---
    styles.add(ParagraphStyle(name='NameHeader',
                              fontName='Helvetica-Bold',
                              fontSize=24,
                              leading=28,
                              alignment=0, # Left
                              spaceAfter=0.1*inch))

    styles.add(ParagraphStyle(name='ContactHeader',
                              fontName='Helvetica',
                              fontSize=10,
                              leading=12,
                              alignment=0, # Left
                              spaceAfter=0.2*inch))

    styles.add(ParagraphStyle(name='SectionTitle',
                              fontName='Helvetica-Bold',
                              fontSize=14,
                              leading=18,
                              spaceBefore=0.2*inch,
                              spaceAfter=0.1*inch,
                              textColor=HexColor('#333333')))

    styles.add(ParagraphStyle(name='JobTitle',
                              fontName='Helvetica-Bold',
                              fontSize=11,
                              leading=14))

    styles.add(ParagraphStyle(name='CompanyDate',
                              fontName='Helvetica-Oblique',
                              fontSize=10,
                              leading=12,
                              textColor=gray,
                              spaceAfter=0.05*inch))

    styles.add(ParagraphStyle(name='BulletPoint',
                              parent=styles['Normal'],
                              leftIndent=0.25*inch,
                              bulletIndent=0.1*inch,
                              firstLineIndent=0,
                              spaceBefore=0.05*inch))

    styles.add(ParagraphStyle(name='NormalIndented',
                              parent=styles['Normal'],
                              leftIndent=0.25*inch))

    story = []

    # Define a two-column layout
    def two_column_layout(canvas, doc):
        canvas.saveState()
        # Draw a vertical line to separate columns
        canvas.setStrokeColor(gray)
        canvas.setLineWidth(0.5)
        canvas.line(letter[0]/2, doc.bottomMargin, letter[0]/2, letter[1]-doc.topMargin)
        canvas.restoreState()

    # Create a frame for the first column
    frame1 = Frame(doc.leftMargin, doc.bottomMargin, letter[0]/2 - doc.leftMargin - doc.rightMargin/2, letter[1] - doc.topMargin - doc.bottomMargin,
                   id='col1', showBoundary=1)

    # Create a frame for the second column
    frame2 = Frame(letter[0]/2 + doc.rightMargin/2, doc.bottomMargin, letter[0]/2 - doc.leftMargin - doc.rightMargin/2, letter[1] - doc.topMargin - doc.bottomMargin,
                   id='col2', showBoundary=1)

    # Create a page template with two columns
    page_template = PageTemplate(id='TwoColumns', frames=[frame1, frame2], onPage=two_column_layout)
    doc.addPageTemplates([page_template])

    # --- Personal Details ---
    if data.get('full_name'):
        story.append(Paragraph(data['full_name'].upper(), styles['NameHeader']))

    contact_info = []
    if data.get('email'): contact_info.append(data['email'])
    if data.get('phone'): contact_info.append(data['phone'])
    if data.get('linkedin'): contact_info.append(f"LinkedIn: {data['linkedin']}")
    if data.get('github'): contact_info.append(f"GitHub: {data['github']}")
    if contact_info:
        story.append(Paragraph(" | ".join(contact_info), styles['ContactHeader']))

    story.append(HRFlowable(width="100%", thickness=0.5, color=gray, spaceBefore=0.1*inch, spaceAfter=0.1*inch))

    # --- Photo ---
    img = Image.open(photo_path)
    img_byte_arr = io.BytesIO()
    img.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)
    story.append(ReportLabImage(img_byte_arr, width=1.5*inch, height=1.5*inch))

    # --- Summary ---
    if data.get('summary'):
        story.append(Paragraph("Summary", styles['SectionTitle']))
        story.append(Paragraph(data['summary'], styles['Normal']))
        story.append(Spacer(1, 0.1*inch))

    # --- Professional Experience ---
    experiences = data.get('experiences', [])
    if experiences:
        story.append(Paragraph("Professional Experience", styles['SectionTitle']))
        for exp in experiences:
            if exp.get('title') and exp.get('company'):
                story.append(Paragraph(exp['title'], styles['JobTitle']))
                story.append(Paragraph(f"{exp['company']} | {exp.get('dates', 'N/A')}", styles['CompanyDate']))
                if exp.get('description'):
                    # Basic handling for bullet points (assuming user types '-' or similar)
                    desc_lines = exp['description'].split('\n')
                    for line in desc_lines:
                        line = line.strip()
                        if line.startswith(('-', '*', 'â€¢')):
                            story.append(Paragraph(line, styles['BulletPoint'], bulletText=line[0]))
                        elif line:
                             story.append(Paragraph(line, styles['NormalIndented']))
                story.append(Spacer(1, 0.15*inch))

    # --- Education ---
    education_entries = data.get('education_entries', [])
    if education_entries:
        story.append(Paragraph("Education", styles['SectionTitle']))
        for edu in education_entries:
            if edu.get('degree') and edu.get('institution'):
                story.append(Paragraph(edu['degree'], styles['JobTitle']))
                story.append(Paragraph(f"{edu['institution']} | {edu.get('edu_dates', 'N/A')}", styles['CompanyDate']))
                if edu.get('edu_details'):
                    story.append(Paragraph(edu['edu_details'], styles['NormalIndented']))
                story.append(Spacer(1, 0.1*inch))

    # --- Skills ---
    if data.get('skills'):
        story.append(Paragraph("Skills", styles['SectionTitle']))
        story.append(Paragraph(data['skills'], styles['Normal'])) # Assuming comma-separated
        story.append(Spacer(1, 0.1*inch))

    # --- Hobbies ---
    if data.get('hobbies'):
        story.append(Paragraph("Hobbies", styles['SectionTitle']))
        story.append(Paragraph(data['hobbies'], styles['Normal']))
        story.append(Spacer(1, 0.1*inch))

    doc.build(story)
    buffer.seek(0)
    return buffer

# Example usage
data = {
    'full_name': 'Ellen Johnson',
    'email': 'help@enhancv.com',
    'linkedin': 'linkedin.com',
    'summary': 'Motivated Digital Marketing Manager with over 3 years of experience in driving user acquisition and growth through strategic paid campaigns. Expert in data analysis, creative optimization, and cross-functional collaboration to achieve business objectives. Proven track record of scaling campaigns and enhancing ROI.',
    'experiences': [
        {
            'title': 'Senior Digital Marketing Specialist',
            'company': 'Tech Innovate',
            'dates': '01/2022 - Present',
            'description': '- Led the development and execution of comprehensive digital marketing campaigns across Meta, Google, and TikTok, increasing user acquisition by 45% within 12 months.\n- Managed a $500K quarterly budget for paid acquisition channels, optimizing spend for a 30% improvement in ROAS.\n- Implemented advanced targeting and retargeting strategies that reduced CPA by 20%, while increasing conversion rates by 15%.'
        },
        # Add more experiences as needed
    ],
    'education_entries': [
        {
            'degree': 'Master of Science in Marketing Analytics',
            'institution': 'University of California, Berkeley',
            'edu_dates': '01/2015 - 01/2017',
            'edu_details': 'Relevant coursework in strategic finance and operations management.'
        },
        # Add more education entries as needed
    ],
    'skills': 'Data Analysis, Paid Acquisition, Retargeting, ROAS Optimization, Cross-Functional Collaboration, Google Analytics, Looker, Appsflyer, Meta Advertising, Google Ads, TikTok Ads, Snapchat Ads, SQL',
    'hobbies': 'Reading, Hiking, Photography'
}

photo_path = 'path/to/your/profile.jpg'  # Replace with the path to your local image file
pdf_buffer = generate_pdf(data, photo_path)

# Save the PDF to a file
with open('resume.pdf', 'wb') as f:
    f.write(pdf_buffer.read())


look at the script above let's call it "your code" 

now it has an error and does not download for some reason it returns this error here 
172.20.10.2 - - [17/May/2025 18:15:24] "GET /download-resume/template_3 HTTP/1.1" 302 -
172.20.10.2 - - [17/May/2025 18:15:24] "GET /select-template HTTP/1.1" 200 -
172.20.10.2 - - [17/May/2025 18:15:25] "GET /static/images/classic_preview.png HTTP/1.1" 304 -
172.20.10.2 - - [17/May/2025 18:15:25] "GET /static/images/professional_preview.png HTTP/1.1" 404 -
172.20.10.2 - - [17/May/2025 18:15:25] "GET /static/images/modern_preview.png HTTP/1.1" 304 -

now there's a script in the list of scripts that does download
this on below
# pdf_templates/classic_template.py
import io
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, HRFlowable
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.colors import HexColor, black, gray

def generate_pdf(data):
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter,
                            rightMargin=0.75*inch, leftMargin=0.75*inch,
                            topMargin=0.75*inch, bottomMargin=0.75*inch)
    
    styles = getSampleStyleSheet()

    # --- Custom Styles ---
    styles.add(ParagraphStyle(name='NameHeader',
                              fontName='Helvetica-Bold',
                              fontSize=24,
                              leading=28,
                              alignment=1, # Center
                              spaceAfter=0.1*inch))

    styles.add(ParagraphStyle(name='ContactHeader',
                              fontName='Helvetica',
                              fontSize=10,
                              leading=12,
                              alignment=1, # Center
                              spaceAfter=0.2*inch))

    styles.add(ParagraphStyle(name='SectionTitle',
                              fontName='Helvetica-Bold',
                              fontSize=14,
                              leading=18,
                              spaceBefore=0.2*inch,
                              spaceAfter=0.1*inch,
                              textColor=HexColor('#333333')))

    styles.add(ParagraphStyle(name='JobTitle',
                              fontName='Helvetica-Bold',
                              fontSize=11,
                              leading=14))

    styles.add(ParagraphStyle(name='CompanyDate',
                              fontName='Helvetica-Oblique',
                              fontSize=10,
                              leading=12,
                              textColor=gray,
                              spaceAfter=0.05*inch))
    
    styles.add(ParagraphStyle(name='BulletPoint',
                              parent=styles['Normal'],
                              leftIndent=0.25*inch,
                              bulletIndent=0.1*inch,
                              firstLineIndent=0,
                              spaceBefore=0.05*inch))

    styles.add(ParagraphStyle(name='NormalIndented',
                              parent=styles['Normal'],
                              leftIndent=0.25*inch))


    story = []

    # --- Personal Details ---
    if data.get('full_name'):
        story.append(Paragraph(data['full_name'].upper(), styles['NameHeader']))
    
    contact_info = []
    if data.get('email'): contact_info.append(data['email'])
    if data.get('phone'): contact_info.append(data['phone'])
    if data.get('linkedin'): contact_info.append(f"LinkedIn: {data['linkedin']}")
    if data.get('github'): contact_info.append(f"GitHub: {data['github']}")
    if contact_info:
        story.append(Paragraph(" | ".join(contact_info), styles['ContactHeader']))

    story.append(HRFlowable(width="100%", thickness=0.5, color=gray, spaceBefore=0.1*inch, spaceAfter=0.1*inch))

    # --- Summary ---
    if data.get('summary'):
        story.append(Paragraph("Summary", styles['SectionTitle']))  =>
        story.append(Paragraph(data['summary'], styles['Normal']))
        story.append(Spacer(1, 0.1*inch))

    # --- Professional Experience ---
    experiences = data.get('experiences', [])
    if experiences:
        story.append(Paragraph("Professional Experience", styles['SectionTitle']))
        for exp in experiences:
            if exp.get('title') and exp.get('company'):
                story.append(Paragraph(exp['title'], styles['JobTitle']))
                story.append(Paragraph(f"{exp['company']} | {exp.get('dates', 'N/A')}", styles['CompanyDate']))
                if exp.get('description'):
                    # Basic handling for bullet points (assuming user types '-' or similar)
                    desc_lines = exp['description'].split('\n')
                    for line in desc_lines:
                        line = line.strip()
                        if line.startswith(('-', '*', 'â€¢')):
                            story.append(Paragraph(line, styles['BulletPoint'], bulletText=line[0]))
                        elif line:
                             story.append(Paragraph(line, styles['NormalIndented']))
                story.append(Spacer(1, 0.15*inch))

    # --- Education ---
    education_entries = data.get('education_entries', [])
    if education_entries:
        story.append(Paragraph("Education", styles['SectionTitle']))
        for edu in education_entries:
            if edu.get('degree') and edu.get('institution'):
                story.append(Paragraph(edu['degree'], styles['JobTitle']))
                story.append(Paragraph(f"{edu['institution']} | {edu.get('edu_dates', 'N/A')}", styles['CompanyDate']))
                if edu.get('edu_details'):
                    story.append(Paragraph(edu['edu_details'], styles['NormalIndented']))
                story.append(Spacer(1, 0.1*inch))
    
    # --- Skills ---
    if data.get('skills'):
        story.append(Paragraph("Skills", styles['SectionTitle']))
        story.append(Paragraph(data['skills'], styles['Normal'])) # Assuming comma-separated
        story.append(Spacer(1, 0.1*inch))

    # --- Hobbies ---
    if data.get('hobbies'):
        story.append(Paragraph("Hobbies", styles['SectionTitle']))
        story.append(Paragraph(data['hobbies'], styles['Normal']))
        story.append(Spacer(1, 0.1*inch))

    doc.build(story)
    buffer.seek(0)
    return buffer

now I believe that that this script I gave you the one that works has a property that you can reference to fix your code.. do that .. fix your code and return it to me well 